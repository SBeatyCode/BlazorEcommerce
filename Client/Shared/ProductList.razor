@using BlazorEcommerce.Client.Services.ProductServices;
@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
	<span>Loading Products. . .</span>
}
else
{
	<ul class="list-unstyled">
		@foreach (var product in ProductService.Products)
		{
			<li class="media my-3">
				<div class="media-img-wrapper mr-2">
					<a href="/product/@product.Id">
						<img class="media-img" src="@product.ImageUrl" alt="@product.Name">
					</a>
				</div>
				<div class="media-body">
					<a href="/product/@product.Id">
						<h4 class="mb-0">@product.Name</h4>
					</a>
					<p>@product.Description</p>
					<h5 class="price">
						@GetPriceText(product)
					</h5>
				</div>
			</li>
		}
	</ul>
}

@code {
	protected override void OnInitialized()
	{
		ProductService.ProductsChanged += StateHasChanged;
	}

	public void Dispose()
	{
		ProductService.ProductsChanged -= StateHasChanged;
	}

	private string GetPriceText(Product product)
	{
		List<ProductVarient> productVarients = product.Varients;

		if(productVarients.Count <= 0)
		{
			return String.Empty;
		}
		else if(productVarients.Count == 1)
		{
			return $"${productVarients[0].Price}";
		}
		else
		{
			decimal minPrice = productVarients.Min(v => v.Price);
			return $"Starts at ${minPrice}";
		}
	}
}
