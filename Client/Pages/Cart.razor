@page "/cart"
@using BlazorEcommerce.Client.Services.CartService;
@using BlazorEcommerce.Client.Services.OrderService;
@using BlazorEcommerce.Shared;
@using BlazorEcommerce.Shared.DTOs;
@inject ICartService CartService
@inject IOrderService OrderService

<h2>Shopping Cart</h2>

@if(cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else if(orderPlaced)
{
    <h4>Thank You! Your Order has been placed!</h4>
    <span>Check your order status <a href="orders">here</a></span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ProductImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.ProductName</a></h5>
                    <span>@product.ProductTypeName</span>
                    <input type="number" class="form-control input-quantity" min="1"
                           value="@product.ProductQuantity" onchange="@((ChangeEventArgs args) => UpdateItemQuantity(args, product))">
                </div>
                <div class="cart-product-price">
                    $@(product.ProductPrice * product.ProductQuantity)
                </div>
                <button class="btn-delete" onclick="@RemoveFromCart(product)">
                    Delete
                </button>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count Items): $@cartProducts.Sum(product => product.ProductPrice * product.ProductPrice)
        </div>
    </div>
    <button class="btn alert-success float-end mt-1" onclick="@PlaceOrder()">Place Order</button>
    <button class="btn alert-danger float-end mt-1" onclick="@ClearCart()">Clear Cart</button>
}

@code {
    List<CartItemProductResponse>? cartProducts = null;
    string message = "Loading Cart";
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        message = "Loading Cart";
        orderPlaced = false;
        await LoadCart();
    }

    private async Task RemoveFromCart(CartItemProductResponse cartItemProduct)
    {
        await CartService.RemoveFromCart(cartItemProduct);
        message = "Loading Cart";
        await LoadCart();
    }

    private async Task LoadCart()
    {
        var loadedCart = await CartService.GetCartProducts();

        if (loadedCart.Count == 0)
        {
            message = "Your Cart Is Empty";
            cartProducts = new List<CartItemProductResponse>();
        }
        else
        {
            cartProducts = loadedCart;
        }
    }

    private async Task UpdateItemQuantity(ChangeEventArgs args, CartItemProductResponse product)
    {
        product.ProductQuantity = int.Parse(args.Value.ToString());
        if (product.ProductQuantity < 1)
            product.ProductQuantity = 1;

        await CartService.UpdateItemQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.UpdateCartItemCount();
        orderPlaced = true;
    }

    private async Task ClearCart()
    {
        await CartService.ClearCart();
    }
}
