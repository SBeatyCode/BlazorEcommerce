@page "/product/{id:int}"
@using BlazorEcommerce.Client.Services.CartService;
@using BlazorEcommerce.Client.Services.ProductServices;
@inject IProductService ProductService
@inject ICartService CartService

@if (product == null)
{
	<span>@message</span>
}
else
{
	<div class="media">
		<div class="media-img-wrapper mr-2">
			<img class="media-img" src="@product.ImageUrl" atl="@product.Name">
		</div>
		<div class="media-body">
			<h2>@product.Name</h2>
			<p>@product.Description</p>
			@if(product.Varients != null && product.Varients.Count > 1)
			{
				<div class="mb-3">
					<select class="form-select" @bind="currentTypeId">
						@foreach (ProductVarient varient in product.Varients)
						{
							<option value="@varient.ProductTypeId">
								@varient.ProductType.Name
							</option>
						}
					</select>
				</div>
			}
			@if (GetSelectedProductVarient() != null)
			{
				@if (GetSelectedProductVarient().OriginalPrice > GetSelectedProductVarient().Price)
				{
					<h6 class="text-muted original-price">
						$@GetSelectedProductVarient().OriginalPrice
					</h6>
				}
				<h4 class="price">
					$@GetSelectedProductVarient().Price
				</h4>
			}
			<button class="btn btn-primary" @onclick="AddToCart">
				<i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
			</button>
		</div>
	</div>
}

@code {
	private Product? product = null;
	private string message = string.Empty;
	private int currentTypeId = 1;

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		message = "Fetching Product. . .";

		var result = await ProductService.GetProductbyIdAsync(Id);

		if (result.Success == false || result.Data == null)
		{
			message = $"Could not find product with the id {Id}";
		}
		else
		{
			product = result.Data;

			if(product.Varients.Count > 0)
			{
				currentTypeId = product.Varients[0].ProductTypeId;
			}
		}
	}

	/// <summary>
	/// Gets the PorductVarient for the product based on the currentTypeID
	/// (which matches a ProductType) that is selected by the user
	/// </summary>
	/// <returns></returns>
	private ProductVarient GetSelectedProductVarient()
	{
		ProductVarient varient = product.Varients.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
		return varient;
	}

	private async Task AddToCart()
	{
		ProductVarient product = GetSelectedProductVarient();

		CartItem cartItem = new CartItem
		{
			ProductId = product.ProductId,
			ProductTypeId = product.ProductTypeId
		};

		await CartService.AddToCart(cartItem);
	}
}
